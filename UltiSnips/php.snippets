global !p

def namespace(snip, path):
    import os
    namespace = pathToNamespace(path)
    if (len(namespace) == 0):
        return ''
    return os.linesep + snip.mkline('namespace ' + namespace + ';') + os.linesep

def pathToNamespace(path):
    import re
    path = path.replace('\\', '/')

    parts = []
    for part in path.split('/'):
        if re.match('^[A-Z]', part):
            parts.append(part)
        else:
            parts = []
    parts.pop()

    return '\\'.join(parts)

endglobal


snippet _skel "Template" b
<?php namespace `!v expand("%:h")`;

class `!v expand("%:t:r")`
{
    $0
}
endsnippet

snippet class "Class file" !
<?php
`!p snip.rv = namespace(snip, path)`
class `!p snip.rv = snip.basename`
{
    ${0}
}
endsnippet

snippet test "PHPUnit Test Case"
<?php
`!p snip.rv = namespace(snip, path)`
class `!p snip.rv = snip.basename` extends \PHPUnit_Framework_TestCase
{
    ${0}
}
endsnippet

snippet iface "Interface file" !
<?php
`!p snip.rv = namespace(snip, path)`
interface `!p snip.rv = snip.basename`
{
    ${0}
}
endsnippet

snippet trait "Trait file" !
<?php
`!p snip.rv = namespace(snip, path)`
trait `!p snip.rv = snip.basename`
{
    ${0}
}
endsnippet

snippet fun "Method"
${1:public} function ${2:name}(${3})
{
    ${0}
}
endsnippet

snippet con "Constructor"
public function __construct(${1})
{
    ${0}
}
endsnippet
snippet getter "PHP Class Getter" !b
public function get${1/\w+\s*/\u$0/}()
{
    return $this->$1;$2
}
$4
endsnippet

snippet setter "PHP Class Setter" !b
public function set${1/\w+\s*/\u$0/}($$1)
{
    $this->$1 = $$1;$3

    ${4:return $this;}
}
$0
endsnippet

snippet sg "PHP Class Setter Getter" !b
/**
 * @param ${2:mixed} $$1
 *
 * @return $this
 */
public function set${1/\w+\s*/\u$0/}($$1)
{
    $this->$1 = $$1;

    ${4:return $this;}
}

/**
 * @return $2
 */
public function get${1/\w+\s*/\u$0/}()
{
    return $this->$1;
}
endsnippet

snippet ifun "method implementation"
/**
 * {@inheritDoc}
 */
${1:public} function ${2:name}(${3})
{
    ${0}
}
endsnippet

snippet ofun "method override"
/**
 * {@inheritDoc}
 */
${1:public} function ${2:name}(${3})
{
    ${4:parent::$2(${3});}
    ${0}
}
endsnippet

snippet cpr "Class property"
/**
 * @var $3
 */
${1:private} $$2;$4
endsnippet

############
# Laravel4 #
############

snippet _laravel4_model "Laravel 4 model class" b
# A generic model
class `!v expand("%:t:r")` {
    $0
}
endsnippet

snippet _laravel4_view "Laravel 4 view file" b
# A generic view
class `!v expand("%:t:r")` {
    $0
}
endsnippet

snippet _laravel4_controller "Laravel 4 controller class" b
# a generic controller
class `!v expand("%:t:r")` {
    $0
}
endsnippet

snippet _laravel4_migration "Laravel 4 migration class" b
<?php

use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class create${1/\w+\s*/$0/}Table extends Migration

{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('${1:TableName}', function (Blueprint $table) {
            $table->increments('id');
            $table->${2:datatype}('${3:colname}')
            $table->timestamps();
            // $table->softDeletes();

            // $table->foreign('created_by')->references('id')->on('users')->onDelete('cascade');
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::drop('$1');
    }
}
endsnippet

snippet lmstring "Laravel migration string template" b
$table->string('${1:colname}');$0
endsnippet

snippet lminteger "Laravel migration integer template" b
$table->integer('$1');$0
endsnippet

snippet lmtext "Laravel migration text template" b
$table->text('${1:colname}');$0
endsnippet

snippet lmstring "Laravel migration string template" b
$table->string('${1:colname}');$0
endsnippet

snippet lmunsigned "Laravel migration unsigned template" b
$table->unsignedInteger('${1:colname}');$0
endsnippet

snippet lmdrop "Laravel migration drop column" b
$table->dropColumn('${1:colname}');$0
endsnippet

############
# CellTrak #
############

snippet file "File-level comment" b
/**
 * ${1:CellTrak VisitManager 2.x.}
 *
 * @package ${2:AppBundle}
 */

endsnippet


snippet class "Class keyword" !b
<?php

namespace ${1:`substitute(substitute(expand("%:h"), '\v^\w+\/(\u)', '\1', ''), '\/', '\\\', 'g')`};

class ${2:`Filename('', 'myClass')`}
{
    ${3}
}
endsnippet

###########
# PHPUnit #
###########

snippet set "Set Up Function" !b
/**
 * Run before each test.
 *
 * @return void
 */
public function setUp()
{
    $1
}
endsnippet

snippet test "Test Method" !b
/**
 * ${1:Short description}
 *
 * @group ${2:unit}
 * @return void
 */
public function test${3:Name}(${4:$forDepends})
{
    $this->assert${5:Equals}(${6:expected}, ${7:actual});
}
endsnippet




